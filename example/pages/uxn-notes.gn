!meta!
title: Uxn Notes
static: true
!meta!

[h2|Uxn Notes]

[p|[a, href: "https://wiki.xxiivv.com/site/uxn.html"|Uxn] is an 8-bit virtual stack machine, created by [a, href: "https://wiki.xxiivv.com/site/devine_lu_linvega.html"|Devine], and programmed in a unique flavor of assembly.]

[p|I have a [a, href: "files/uxn-zine.pdf"|small zine design] of Rostiger's [a, href: "https://nchrs.xyz/site/uxn_notes.html"|adorable uxn notes], which you can learn how to fold [a, href: "https://en.wikibooks.org/wiki/Zine_Making/Putting_pages_together#An_8-sided_zine_from_1_sheet_with_1_cut"|here]. It turned out alright, and I'll probably be making some small improvements to it soon!]

[p|You can now download the zine as a latex project! It's a neat template which you can use in any other 16-page zine you want, and what's nice is all you'd need to change are the images referenced the [a, href: "files/uxn-zine/source.tex"|source.tex] file. You can download the compressed project file [a, href: "files/uxn-zine.tar.gz"|here], or go to the [a, href: "files.html"|files] page and download the tex and image files individually :3]


[div class: "break"|]

[h3|Hello world, part 2!]

[pre|"
( dev/console )

|10 @Console [ &pad $8 &char ]

( init )

|0100 ( -> )
	
	;hello-word 

	&loop
		( send ) LDAk .Console/char DEO
		( incr ) #0001 ADD2
		( loop ) LDAk ,&loop JCN
	POP2
	
BRK

@hello-word \"Hello 20 \"World!
"]

[p|This is the new version of hello world (as of commit ea0584a2), which is significantly more concise, and uses some of the new opcodes. If you want an example which is a bit longer, I'd recommend checking out the first breakdown.]

[p|The couple of lines are the same as they were before, so I won't go over them again.]

[p|To start, everything happens in one space, and isn't broken up between functions. The general overview of how the program works is the same as the older version; the newer version is just a bit more concise.]

[p|Once again, let's go through this line by line, starting at line 9.]

[pre|"
;hello-world
└──────────┘
      A
"]

[p|This one's pretty simple (though it may look weird if you're not quite familiar with uxn's concepts yet). The semicolon tells the cpu to use absolute addresses, and in this case the address it's referring to is the `@hello-world` label. That absolute address is added to the stack, and the program continues to line 11.]

[pre|"
&loop 
└───┘ 
  A
"]

[p|This one is also super short; part A just creates a sublabel called `loop` for later use.]

[pre|"
( send ) LDAk .Console/char DEO
└──────┘ └──┘ └───────────────┘
   A      B           C
"]

[p|Part A is just a comment, but part B is where we see a new opcode! `LDA` takes an absolute address and adds the value at that address to the stack. Here it's used with the keep mode, so it doesn't consume that address (which points to the start of our `"hello 20 "world`) text. With the character at that address now on the top of the stack, part C takes that value and prints it to the console.]

[pre|"
( incr ) #0001 ADD2
└──────┘ └────────┘
   A         B
"]

[p|Part B, as the comment says, just increments our address, which is now at the top of the stack. The address on the stack now points to the next character of the text.]

[pre|"
( loop ) LDAk ,&loop JCN
└──────┘ └──┘ └────────┘
   A      B       C
"]

[p|Part B is the same thing as used before, it gets the value at the address, keeps the address on the stack, and adds the value to the top of the stack. This value is then used by part C, which passes two arguments, (that value, and the relative address of the `loop` sublabel which was defined earlier) to the `JCN` opcode. `JCN` takes a boolean value and an address, and if the boolean is true (not a zero), it jumps to that address. Here, it looks at that value, which is normally a character, and repeats. However, if the address has been incremented past where we have characters, the value will be #00 (I think, but the point is it's a zero), and the loop stops.]

[p|The final opcode, `POP2`, removes the top two-byte item on the stack, which is our address. With everything done and "hello world" printed to the console, we break.]

